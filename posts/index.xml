<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Animal Society</title><link>https://animalsociety.github.io/blog/posts/</link><description>Recent content in Posts on Animal Society</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Oct 2020 09:16:24 +0100</lastBuildDate><atom:link href="https://animalsociety.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>3D Tile System in Godot</title><link>https://animalsociety.github.io/blog/posts/3d-tile-system-in-godot/</link><pubDate>Mon, 26 Oct 2020 09:16:24 +0100</pubDate><guid>https://animalsociety.github.io/blog/posts/3d-tile-system-in-godot/</guid><description>This is a short article to bring some insight into how we implemented a simple 3D tile system in Godot. The code is in C#.
Enjoy!
Overview In essence, the entire map is just a 3D array where each cell maps to an abstract Tile class:
Tile[,,] Tiles; // [column, row, floor] The abstract Tile class defines the common data and behaviour that all tiles in the game should have. Arguably the most important piece of data that each tile has is its position in the 3D array, and its Load method which simply loads a 3D model into the game based on its cell position.</description></item></channel></rss>